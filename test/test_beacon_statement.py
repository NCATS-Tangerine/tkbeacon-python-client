# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon web service application programming interface (API).   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: richard@starinformatics.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import tkbeacon
from tkbeacon.models.beacon_statement import BeaconStatement  # noqa: E501
from tkbeacon.rest import ApiException

class TestBeaconStatement(unittest.TestCase):
    """BeaconStatement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BeaconStatement
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = tkbeacon.models.beacon_statement.BeaconStatement()  # noqa: E501
        if include_optional :
            return BeaconStatement(
                id = '0', 
                subject = tkbeacon.models.beacon_statement_subject.BeaconStatementSubject(
                    id = '0', 
                    name = '0', 
                    categories = [
                        '0'
                        ], ), 
                predicate = tkbeacon.models.beacon_statement_predicate.BeaconStatementPredicate(
                    edge_label = '0', 
                    relation = '0', 
                    negated = True, ), 
                object = tkbeacon.models.beacon_statement_object.BeaconStatementObject(
                    id = '0', 
                    name = '0', 
                    categories = [
                        '0'
                        ], )
            )
        else :
            return BeaconStatement(
        )

    def testBeaconStatement(self):
        """Test BeaconStatement"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
